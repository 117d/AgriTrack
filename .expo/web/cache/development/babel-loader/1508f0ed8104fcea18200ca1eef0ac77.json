{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React, { Component, useState } from \"react\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport Image from \"react-native-web/dist/exports/Image\";\nimport { StatusBarIOS } from \"react-native-web/dist/index\";\nimport Dimensions from \"react-native-web/dist/exports/Dimensions\";\nimport { useNavigation } from \"@react-navigation/native\";\nimport MapView from \"react-native-maps\";\nimport haversine from \"haversine\";\n\nvar _Dimensions$get = Dimensions.get(\"window\"),\n    width = _Dimensions$get.width,\n    height = _Dimensions$get.height;\n\nimport Geolocation from \"react-native-geolocation-service\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\n\nvar MapFunction = function (_Component) {\n  _inherits(MapFunction, _Component);\n\n  var _super = _createSuper(MapFunction);\n\n  function MapFunction(props) {\n    var _this;\n\n    _classCallCheck(this, MapFunction);\n\n    _this = _super.call(this, props);\n    _this.state = {\n      routeCoordinates: [],\n      distanceTravelled: 0,\n      prevLatLng: {},\n      speed: 0\n    };\n    return _this;\n  }\n\n  _createClass(MapFunction, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this2 = this;\n\n      Geolocation.getCurrentPosition(function (position) {}, function (error) {\n        return alert(error.message);\n      }, {\n        enableHighAccuracy: true,\n        timeout: 20000,\n        maximumAge: 1000\n      });\n      this.watchID = Geolocation.watchPosition(function (position) {\n        var _this2$state = _this2.state,\n            routeCoordinates = _this2$state.routeCoordinates,\n            distanceTravelled = _this2$state.distanceTravelled;\n        var newLatLngs = {\n          latitude: position.coords.latitude,\n          longitude: position.coords.longitude\n        };\n        var positionLatLngs = pick(position.coords, [\"latitude\", \"longitude\"]);\n        var newSpeed = position.coords.speed;\n\n        _this2.setState({\n          routeCoordinates: routeCoordinates.concat(positionLatLngs),\n          distanceTravelled: distanceTravelled + _this2.calcDistance(newLatLngs),\n          prevLatLng: newLatLngs,\n          speed: newSpeed\n        });\n      });\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      Geolocation.clearWatch(this.watchID);\n    }\n  }, {\n    key: \"calcDistance\",\n    value: function calcDistance(newLatLng) {\n      var prevLatLng = this.state.prevLatLng;\n      return haversine(prevLatLng, newLatLng) || 0;\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var navigation = this.props.navigation;\n      return _jsxs(View, {\n        style: styles.container,\n        children: [_jsx(MapView, {\n          style: styles.map,\n          mapType: \"satellite\",\n          showsUserLocation: true,\n          followUserLocation: true,\n          overlays: [{\n            coordinates: this.state.routeCoordinates,\n            strokeColor: \"#19B5FE\",\n            lineWidth: 10\n          }]\n        }), _jsx(View, {\n          style: styles.navBar,\n          children: _jsx(Text, {\n            style: styles.navBarText,\n            children: \"Run Rabbit Run\"\n          })\n        }), _jsx(View, {\n          style: styles.bottomBar,\n          children: _jsxs(View, {\n            style: styles.bottomBarGroup,\n            children: [_jsx(Text, {\n              style: styles.bottomBarHeader,\n              children: \"DISTANCE\"\n            }), _jsxs(Text, {\n              style: styles.bottomBarContent,\n              children: [parseFloat(this.state.distanceTravelled).toFixed(2), \" km;\", this.state.speed, \" km/h\"]\n            })]\n          })\n        })]\n      });\n    }\n  }]);\n\n  return MapFunction;\n}(Component);\n\nexport { MapFunction as default };\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    justifyContent: \"center\",\n    alignItems: \"center\",\n    backgroundColor: \"#F5FCFF\"\n  },\n  navBar: {\n    backgroundColor: \"rgba(0,0,0,0.7)\",\n    height: 64,\n    width: width,\n    position: \"absolute\",\n    top: 0,\n    bottom: 0,\n    left: 0,\n    right: 0\n  },\n  navBarText: {\n    color: \"#19B5FE\",\n    fontSize: 16,\n    fontWeight: \"700\",\n    textAlign: \"center\",\n    paddingTop: 30\n  },\n  map: {\n    flex: 0.7,\n    width: width,\n    height: height\n  },\n  bottomBar: {\n    position: \"absolute\",\n    height: 100,\n    bottom: 0,\n    backgroundColor: \"rgba(0,0,0,0.7)\",\n    width: width,\n    padding: 20,\n    flexWrap: \"wrap\",\n    flexDirection: \"row\"\n  },\n  bottomBarGroup: {\n    flex: 1\n  },\n  bottomBarHeader: {\n    color: \"#fff\",\n    fontWeight: \"400\",\n    textAlign: \"center\"\n  },\n  bottomBarContent: {\n    color: \"#fff\",\n    fontWeight: \"700\",\n    fontSize: 18,\n    marginTop: 10,\n    color: \"#19B5FE\",\n    textAlign: \"center\"\n  }\n});","map":{"version":3,"sources":["C:/Users/Tomiris/projects/AgriTrack/screens/MapFunction.js"],"names":["React","Component","useState","StatusBarIOS","useNavigation","MapView","haversine","Dimensions","get","width","height","Geolocation","MapFunction","props","state","routeCoordinates","distanceTravelled","prevLatLng","speed","getCurrentPosition","position","error","alert","message","enableHighAccuracy","timeout","maximumAge","watchID","watchPosition","newLatLngs","latitude","coords","longitude","positionLatLngs","pick","newSpeed","setState","concat","calcDistance","clearWatch","newLatLng","navigation","styles","container","map","coordinates","strokeColor","lineWidth","navBar","navBarText","bottomBar","bottomBarGroup","bottomBarHeader","bottomBarContent","parseFloat","toFixed","StyleSheet","create","flex","justifyContent","alignItems","backgroundColor","top","bottom","left","right","color","fontSize","fontWeight","textAlign","paddingTop","padding","flexWrap","flexDirection","marginTop"],"mappings":"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","sourcesContent":["import React, { Component, useState } from \"react\";\r\nimport {\r\n  StyleSheet,\r\n  Text,\r\n  View,\r\n  TouchableOpacity,\r\n  Image,\r\n  StatusBarIOS,\r\n  Dimensions,\r\n} from \"react-native\";\r\nimport { useNavigation } from \"@react-navigation/native\";\r\nimport MapView from \"react-native-maps\";\r\nimport haversine from \"haversine\";\r\n//import Geolocation from \"@react-native-community/geolocation\";\r\n\r\nconst { width, height } = Dimensions.get(\"window\");\r\n//const navigation = useNavigation();\r\n//import Geolocation from \"@react-native-community/geolocation\";\r\nimport Geolocation from \"react-native-geolocation-service\";\r\n//navigator.geolocation = require(\"@react-native-community/geolocation\");\r\nexport default class MapFunction extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      routeCoordinates: [],\r\n      distanceTravelled: 0,\r\n      prevLatLng: {},\r\n      speed: 0,\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    /* TO FIX */\r\n    //StatusBarIOS.setStyle(\"light-content\");\r\n    //navigator.geolocation = require(\"@react-native-community/geolocation\");\r\n    //navigator.geolocation.getCurrentPosition(\r\n    Geolocation.getCurrentPosition(\r\n      (position) => {},\r\n      (error) => alert(error.message),\r\n      { enableHighAccuracy: true, timeout: 20000, maximumAge: 1000 }\r\n    );\r\n    //this.watchID = navigator.geolocation.watchPosition((position) => {\r\n    this.watchID = Geolocation.watchPosition((position) => {\r\n      const { routeCoordinates, distanceTravelled } = this.state;\r\n      const newLatLngs = {\r\n        latitude: position.coords.latitude,\r\n        longitude: position.coords.longitude,\r\n      };\r\n      const positionLatLngs = pick(position.coords, [\"latitude\", \"longitude\"]);\r\n      const newSpeed = position.coords.speed;\r\n      this.setState({\r\n        routeCoordinates: routeCoordinates.concat(positionLatLngs),\r\n        distanceTravelled: distanceTravelled + this.calcDistance(newLatLngs),\r\n        prevLatLng: newLatLngs,\r\n        speed: newSpeed,\r\n      });\r\n    });\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    Geolocation.clearWatch(this.watchID);\r\n  }\r\n\r\n  calcDistance(newLatLng) {\r\n    const { prevLatLng } = this.state;\r\n    return haversine(prevLatLng, newLatLng) || 0;\r\n  }\r\n\r\n  render() {\r\n    const { navigation } = this.props;\r\n    return (\r\n      <View style={styles.container}>\r\n        <MapView\r\n          style={styles.map}\r\n          mapType=\"satellite\"\r\n          showsUserLocation={true}\r\n          followUserLocation={true}\r\n          overlays={[\r\n            {\r\n              coordinates: this.state.routeCoordinates,\r\n              strokeColor: \"#19B5FE\",\r\n              lineWidth: 10,\r\n            },\r\n          ]}\r\n        />\r\n        <View style={styles.navBar}>\r\n          <Text style={styles.navBarText}>Run Rabbit Run</Text>\r\n        </View>\r\n        <View style={styles.bottomBar}>\r\n          <View style={styles.bottomBarGroup}>\r\n            <Text style={styles.bottomBarHeader}>DISTANCE</Text>\r\n            <Text style={styles.bottomBarContent}>\r\n              {parseFloat(this.state.distanceTravelled).toFixed(2)} km;\r\n              {this.state.speed} km/h\r\n            </Text>\r\n          </View>\r\n        </View>\r\n      </View>\r\n    );\r\n  }\r\n}\r\n\r\nconst styles = StyleSheet.create({\r\n  container: {\r\n    flex: 1,\r\n    justifyContent: \"center\",\r\n    alignItems: \"center\",\r\n    backgroundColor: \"#F5FCFF\",\r\n  },\r\n  navBar: {\r\n    backgroundColor: \"rgba(0,0,0,0.7)\",\r\n    height: 64,\r\n    width: width,\r\n    position: \"absolute\",\r\n    top: 0,\r\n    bottom: 0,\r\n    left: 0,\r\n    right: 0,\r\n  },\r\n  navBarText: {\r\n    color: \"#19B5FE\",\r\n    fontSize: 16,\r\n    fontWeight: \"700\",\r\n    textAlign: \"center\",\r\n    paddingTop: 30,\r\n  },\r\n  map: {\r\n    flex: 0.7,\r\n    width: width,\r\n    height: height,\r\n  },\r\n  bottomBar: {\r\n    position: \"absolute\",\r\n    height: 100,\r\n    bottom: 0,\r\n    backgroundColor: \"rgba(0,0,0,0.7)\",\r\n    width: width,\r\n    padding: 20,\r\n    flexWrap: \"wrap\",\r\n    flexDirection: \"row\",\r\n  },\r\n  bottomBarGroup: {\r\n    flex: 1,\r\n  },\r\n  bottomBarHeader: {\r\n    color: \"#fff\",\r\n    fontWeight: \"400\",\r\n    textAlign: \"center\",\r\n  },\r\n  bottomBarContent: {\r\n    color: \"#fff\",\r\n    fontWeight: \"700\",\r\n    fontSize: 18,\r\n    marginTop: 10,\r\n    color: \"#19B5FE\",\r\n    textAlign: \"center\",\r\n  },\r\n});\r\n"]},"metadata":{},"sourceType":"module"}