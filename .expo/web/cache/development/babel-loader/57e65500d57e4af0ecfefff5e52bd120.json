{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _readOnlyError from \"@babel/runtime/helpers/readOnlyError\";\nimport React, { Component, useState } from \"react\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport Image from \"react-native-web/dist/exports/Image\";\nimport Dimensions from \"react-native-web/dist/exports/Dimensions\";\nimport { useNavigation } from \"@react-navigation/native\";\nimport MapView from \"react-native-maps\";\nimport haversine from \"haversine\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nexport default function Map() {\n  var _Dimensions$get = Dimensions.get(\"window\"),\n      width = _Dimensions$get.width,\n      height = _Dimensions$get.height;\n\n  var navigation = useNavigation();\n\n  var _useState = useState([]),\n      _useState2 = _slicedToArray(_useState, 2),\n      routeCoordinates = _useState2[0],\n      setRouteCoordinates = _useState2[1];\n\n  var _useState3 = useState(0),\n      _useState4 = _slicedToArray(_useState3, 2),\n      distanceTravelled = _useState4[0],\n      setDistanceTravelled = _useState4[1];\n\n  var _useState5 = useState({}),\n      _useState6 = _slicedToArray(_useState5, 2),\n      prevLating = _useState6[0],\n      setPrevLating = _useState6[1];\n\n  var _useState7 = useState(0),\n      _useState8 = _slicedToArray(_useState7, 2),\n      speed = _useState8[0],\n      setSpeed = _useState8[1];\n\n  var componentDidMount = useCallback(function () {\n    navigator.geolocation.getCurrentPosition(function (position) {}, function (error) {\n      return alert(error.message);\n    }, {\n      enableHighAccuracy: true,\n      timeout: 20000,\n      maximumAge: 1000\n    });\n    var watchID = navigator.geolocation.watchPosition(function (position) {\n      setRouteCoordinates(), _readOnlyError(\"routeCoordinates\");\n      setDistanceTravelled(), _readOnlyError(\"distanceTravelled\");\n      var newLatLngs = {\n        latitude: position.coords.latitude,\n        longitude: position.coords.longitude\n      };\n      var positionLatLngs = pick(position.coords, [\"latitude\", \"longitude\"]);\n      var newSpeed = position.coords.speed;\n      setRouteCoordinates(routeCoordinates.concat(positionLatLngs));\n      setDistanceTravelled(distanceTravelled + calcDistance(newLatLngs));\n      setPrevLating(newLatLngs);\n      setSpeed(newSpeed);\n    });\n  });\n  var componentWillUnmount = useCallback(function () {\n    navigator.geolocation.clearWatch(watchID);\n  });\n  return _jsxs(View, {\n    style: styles.container,\n    children: [_jsx(MapView, {\n      style: styles.map,\n      mapType: \"satellite\",\n      showsUserLocation: true,\n      followUserLocation: true\n    }), _jsx(View, {\n      style: styles.navBar,\n      children: _jsxs(Text, {\n        style: styles.navBarText,\n        children: [\"speed: \", speed]\n      })\n    })]\n  });\n}\n\nfunction calcDistance(newLatLng) {\n  prevLatLng = setPrevLatLng();\n  return haversine(prevLatLng, newLatLng) || 0;\n}\n\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: \"#B8D1A9\",\n    alignItems: \"center\",\n    justifyContent: \"center\"\n  },\n  buttonText: {\n    marginTop: 40,\n    fontSize: 36,\n    fontWeight: \"bold\",\n    letterSpacing: 0.25,\n    color: \"black\"\n  },\n  textTitle: {\n    fontSize: 30,\n    color: \"black\",\n    textAlign: \"center\"\n  },\n  map: {\n    flex: 0.7,\n    width: width,\n    height: height\n  }\n});","map":{"version":3,"sources":["C:/Users/Tomiris/projects/AgriTrack/screens/Maps.js"],"names":["React","Component","useState","useNavigation","MapView","haversine","Map","Dimensions","get","width","height","navigation","routeCoordinates","setRouteCoordinates","distanceTravelled","setDistanceTravelled","prevLating","setPrevLating","speed","setSpeed","componentDidMount","useCallback","navigator","geolocation","getCurrentPosition","position","error","alert","message","enableHighAccuracy","timeout","maximumAge","watchID","watchPosition","newLatLngs","latitude","coords","longitude","positionLatLngs","pick","newSpeed","concat","calcDistance","componentWillUnmount","clearWatch","styles","container","map","navBar","navBarText","newLatLng","prevLatLng","setPrevLatLng","StyleSheet","create","flex","backgroundColor","alignItems","justifyContent","buttonText","marginTop","fontSize","fontWeight","letterSpacing","color","textTitle","textAlign"],"mappings":"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","sourcesContent":["import React, { Component, useState } from \"react\";\r\nimport {\r\n  StyleSheet,\r\n  Text,\r\n  View,\r\n  TouchableOpacity,\r\n  Image,\r\n  //StatusBarIOS,\r\n  Dimensions,\r\n} from \"react-native\";\r\nimport { useNavigation } from \"@react-navigation/native\";\r\nimport MapView from \"react-native-maps\";\r\nimport haversine from \"haversine\";\r\n\r\nexport default function Map() {\r\n  const { width, height } = Dimensions.get(\"window\");\r\n  const navigation = useNavigation();\r\n  /*\r\n  const state = {\r\n    routeCoordinates: [],\r\n    distanceTravelled: 0,\r\n    prevLatLng: {},\r\n    speed: 0,\r\n  };\r\n  */\r\n  const [routeCoordinates, setRouteCoordinates] = useState([]);\r\n  const [distanceTravelled, setDistanceTravelled] = useState(0);\r\n  const [prevLating, setPrevLating] = useState({});\r\n  const [speed, setSpeed] = useState(0);\r\n\r\n  const componentDidMount = useCallback(() => {\r\n    //StatusBarIOS.setStyle(\"light-content\");\r\n    navigator.geolocation.getCurrentPosition(\r\n      (position) => {},\r\n      (error) => alert(error.message),\r\n      { enableHighAccuracy: true, timeout: 20000, maximumAge: 1000 }\r\n    );\r\n    const watchID = navigator.geolocation.watchPosition((position) => {\r\n      //const { routeCoordinates, distanceTravelled } = this.state;\r\n      routeCoordinates = setRouteCoordinates();\r\n      distanceTravelled = setDistanceTravelled();\r\n      const newLatLngs = {\r\n        latitude: position.coords.latitude,\r\n        longitude: position.coords.longitude,\r\n      };\r\n      const positionLatLngs = pick(position.coords, [\"latitude\", \"longitude\"]);\r\n      const newSpeed = position.coords.speed;\r\n\r\n      setRouteCoordinates(routeCoordinates.concat(positionLatLngs));\r\n      setDistanceTravelled(distanceTravelled + calcDistance(newLatLngs));\r\n      setPrevLating(newLatLngs);\r\n      setSpeed(newSpeed);\r\n    });\r\n  });\r\n\r\n  const componentWillUnmount = useCallback(() => {\r\n    navigator.geolocation.clearWatch(watchID);\r\n  });\r\n\r\n  return (\r\n    /*\r\n    <View style={styles.container}>\r\n      <Text style={styles.textTitle}>MAP WILL BE IMPLEMENTED LATER</Text>\r\n      <TouchableOpacity\r\n        style={styles.backButton}\r\n        onPress={() => navigation.navigate(\"Home\")}\r\n      >\r\n        <Text style={styles.buttonText}>BACK</Text>\r\n      </TouchableOpacity>\r\n    </View>\r\n    */\r\n    <View style={styles.container}>\r\n      <MapView\r\n        style={styles.map}\r\n        mapType=\"satellite\"\r\n        showsUserLocation={true}\r\n        followUserLocation={true}\r\n      />\r\n      <View style={styles.navBar}>\r\n        <Text style={styles.navBarText}>speed: {speed}</Text>\r\n      </View>\r\n    </View>\r\n  );\r\n}\r\n\r\nfunction calcDistance(newLatLng) {\r\n  prevLatLng = setPrevLatLng();\r\n  return haversine(prevLatLng, newLatLng) || 0;\r\n}\r\n\r\nconst styles = StyleSheet.create({\r\n  container: {\r\n    flex: 1,\r\n    backgroundColor: \"#B8D1A9\",\r\n    alignItems: \"center\",\r\n    justifyContent: \"center\",\r\n  },\r\n  buttonText: {\r\n    marginTop: 40,\r\n    fontSize: 36,\r\n    fontWeight: \"bold\",\r\n    letterSpacing: 0.25,\r\n    color: \"black\",\r\n  },\r\n  textTitle: {\r\n    fontSize: 30,\r\n    color: \"black\",\r\n    textAlign: \"center\",\r\n  },\r\n  map: {\r\n    flex: 0.7,\r\n    width: width,\r\n    height: height,\r\n  },\r\n});\r\n"]},"metadata":{},"sourceType":"module"}